version: '2.1'
services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: Zookeeper
    healthcheck:
      test: "netstat -an | grep 2181 > /dev/null; if [ 0 != $$? ]; then exit 1; fi;"
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: Kafka
    healthcheck:
      test: "netstat -an | grep 9092 > /dev/null; if [ 0 != $$? ]; then exit 1; fi;"
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: "9092"
      # Create two kafka topics on start
      # test       = 1 partition  1 replica
      # KSQL_INPUT = 4 pattitions 1 replica (ksql defaults to minimum 4 partitions)
      KAFKA_CREATE_TOPICS: "test:1:1,KSQL_INPUT:4:1,KSQL_OUTPUT:4:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

### KSQL
  ksql-server:
    image: "confluentinc/cp-ksql-server:${KSQL_VERSION}"
    container_name: ksql-server
    healthcheck:
      test: "netcat -zv ksql-server 8088"
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: http://0.0.0.0:8088


  ksql-queries:
    image: "confluentinc/cp-ksql-cli:${KSQL_VERSION}"
    container_name: ksql-queries
    volumes:
      - "./ksql-queries:/opt/local/ksql-queries"
    depends_on:
      ksql-server:
        condition: service_healthy
    entrypoint: /opt/local/ksql-queries/entrypoint.sh
    tty: true

  ksql-cli:
    image: "confluentinc/cp-ksql-cli:${KSQL_VERSION}"
    container_name: ksql-cli
    depends_on:
      ksql-server:
        condition: service_healthy
    volumes:
      - "./ksql-queries:/opt/local/ksql-queries"
    entrypoint: ksql http://ksql-server:8088
    tty: true


### Producers
  test-producer:
    build: test-producer
    container_name: test-producer
    depends_on:
      kafka:
        condition: service_healthy
  ksql-producer:
    build: ksql-producer
    container_name: ksql-producer
    depends_on:
      ksql-queries:
        condition: service_started

### Consumers
  test-consumer:
    build: test-consumer
    container_name: test-consumer
    depends_on:
      kafka:
        condition: service_healthy
  ksql-consumer:
    build: ksql-consumer
    container_name: ksql-consumer
    depends_on:
      ksql-producer:
        condition: service_started